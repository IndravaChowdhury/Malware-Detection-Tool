import yara
from pefile import PE
import re
import hashlib
import os

yara_rules = """
    rule Meterpreter_Reverse_Tcp {
      meta:
        author = "chort (@chort0)"
        description = "Meterpreter reverse TCP backdoor in memory. Tested on Win7x64."
      strings:
        $a = { 4d 45 54 45 52 50 52 45 54 45 52 5f 54 52 41 4e 53 50 4f 52 54 5f 53 53 4c [32-48] 68 74 74 70 73 3a 2f 2f 58 58 58 58 58 58 } // METERPRETER_TRANSPORT_SSL … https://XXXXXX
        $b = { 4d 45 54 45 52 50 52 45 54 45 52 5f 55 41 } // METERPRETER_UA
        $c = { 47 45 54 20 2f 31 32 33 34 35 36 37 38 39 20 48 54 54 50 2f 31 2e 30 } // GET /123456789 HTTP/1.0
        $d = { 6d 65 74 73 72 76 2e 64 6c 6c [2-4] 52 65 66 6c 65 63 74 69 76 65 4c 6f 61 64 65 72 } // metsrv.dll … ReflectiveLoader
      condition:
        $a or (any of ($b, $d) and $c)
    }
    """

class IntelljMalware:
    def __init__(self, signatures, yara_rules):
        self.signatures = signatures
        self.yara_rules = yara_rules.strip()  # Remove potential extra whitespace

    def calculate_hash(self, file_path):
        with open(file_path, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()

    def scan_file(self, file_path):
        try:
            compiled_rules = yara.compile(source=self.yara_rules)
            return compiled_rules.match(file_path)
        except yara.Error as e:
            print(f"Error compiling YARA rules: {e}")
            return []

    def file_detector(self, file_path):
        if not os.path.isfile(file_path):
            print(f"Error: {file_path} is not a valid file.")
            return False

        current_hash = self.calculate_hash(file_path)
        matches = self.scan_file(file_path)

        if matches:
            print(f"Warning: This path : {file_path} may contain malware. Matches found: {matches}")
            return True

        with open(file_path, 'rb') as f:
            file_content = f.read()

        for signature, malware_name in self.signatures.items():
            if re.search(signature, file_content):
                print(f'Malware "{malware_name}" detected in {file_path}')
                return True

        print(f'No malware detected in {file_path}')
        return False

def extract_pe_info(file_path):
    pe = PE(file_path)
    print(f"PE File Information:")
    print(f"- Imported Modules: {pe.DIRECTORY_ENTRY_IMPORT}")
    print(f"- Exported Functions: {pe.DIRECTORY_ENTRY_EXPORT}")

if __name__ == "__main__":
    malware_signatures = {
        b'exsignature1': 'ExampleMalware1',
        b'exsignature2': 'ExampleMalware2',
        b'additional_signature1': 'AdditionalMalware1', # Add additional malware signatures
        b'additional_signature2': 'AdditionalMalware2',
    }


    malware_analyzer = IntelljMalware(malware_signatures, yara_rules)
    file_path_to_check = input("Enter the file path to check: ")
    malware_analyzer.file_detector(file_path_to_check)
    extract_pe_info(file_path_to_check)
