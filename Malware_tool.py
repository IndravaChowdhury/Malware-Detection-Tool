import hashlib
import os

def calculate_hash(file_path):
    hasher = hashlib.md5()
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            hasher.update(chunk)
    return hasher.hexdigest()

def save_hash(file_path, hash_value):
    with open('hashes.txt', 'a') as f:
        f.write(f"{file_path}:{hash_value}\n")

def check_file_integrity(file_path):
    if not os.path.isfile(file_path):
        print(f"Error: {file_path} is not a valid file.")
        return

    stored_hash = None

    if os.path.isfile('hashes.txt'):
        with open('hashes.txt', 'r') as f:
            for line in f:
                parts = line.strip().split(':')
                if len(parts) == 2 and parts[0] == file_path:
                    stored_hash = parts[1]

    current_hash = calculate_hash(file_path)

    if stored_hash:
        if stored_hash != current_hash:
            print(f"Warning: {file_path} may have been modified. Current hash: {current_hash}")
        else:
            print(f"{file_path} is unchanged.")
    else:
        print(f"New file detected: {file_path}. Hash: {current_hash}")
        save_hash(file_path, current_hash)

if __name__ == "__main__":
    file_path_to_check = input("Enter the file path to check: ")
    check_file_integrity(file_path_to_check)
